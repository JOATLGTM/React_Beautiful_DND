{"version":3,"sources":["Column.js","ColumnList.js","Header.js","App.js","index.js"],"names":["Container","styled","div","props","isLocked","Handle","Column","index","id","handleDblClk","name","lockedArray","some","lockedItem","useState","hovered","setHover","draggableId","isDragDisabled","provided","onMouseEnter","onMouseLeave","ref","innerRef","draggableProps","dragHandleProps","onDoubleClick","className","defaultProps","column","Title","h3","ListContainer","title","ColumnList","droppableId","droppableProps","items","map","item","replace","str","toUpperCase","renderString","key","placeholder","SubText","p","HeaderContainer","Header","MainContainer","ResultContainer","Button","button","App","handleSubmitBtn","setState","onSubmit","lockedColumns","state","length","handleCancelBtn","renderResults","visibleColumns","columns","join","columnId","currentLockedArray","foundIndexInLockedArray","findIndex","findIndexInVisibleList","prevfilteredVisibleList","filter","nextfilteredVisibleList","newfiltered","indexOf","i","j","splice","convertIdToString","idString","isColumnBeingDraggedInLockedArea","destinationIndex","onDragEnd","result","a","destination","source","sourceColumn","destColumn","sourceItems","destItems","removed","currentState","removedObject","convertStringToObject","copiedItems","availableColumn","visibleColumn","columnOrder","string","this","onClick","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6qBAIA,IAAMA,EAAYC,IAAOC,IAAV,KACF,SAAAC,GAAK,OAAIA,EAAMC,SAAW,OAAS,WAKnC,SAAAD,GAAK,OAAKA,EAAMC,SAKZ,KALK,yIAShBC,EAASJ,IAAOC,IAAV,KAOG,SAASI,EAAOH,GAAQ,IAC3BI,EAA+CJ,EAA/CI,MAAOC,EAAwCL,EAAxCK,GAAIC,EAAoCN,EAApCM,aAAcC,EAAsBP,EAAtBO,KAC3BN,EADiDD,EAAhBQ,YACVC,MAAK,SAAAC,GAAU,OAAIA,IAAeL,KAF7B,EAINM,oBAAS,GAJH,mBAI3BC,EAJ2B,KAIlBC,EAJkB,KAKlC,OACI,kBAAC,IAAD,CAAWC,YAAaT,EAAID,MAAOA,EAAOW,eAAgBd,IACrD,SAACe,GAAD,OACG,kBAACnB,EAAD,eACIoB,aAAc,kBAAMJ,GAAS,IAC7BK,aAAc,kBAAML,GAAS,IAC7BZ,SAAUA,EACVkB,IAAKH,EAASI,UACVJ,EAASK,eACTL,EAASM,gBANjB,CAOIlB,MAAOA,EACPmB,cAAe,kBAAMjB,EAAaD,MAElC,kBAACH,EAAD,KACI,uBAAGsB,UAAWvB,EAAW,aAAeW,EAAU,cAAgB,QAErEL,M,maAOrBJ,EAAOsB,aAAe,CAClBC,OAAQ,IClDZ,IAAM7B,EAAYC,IAAOC,IAAV,KAOT4B,EAAQ7B,IAAO8B,GAAV,KAKLC,EAAgB/B,IAAOC,IAAV,KAIC,SAAAC,GAAK,MAAoB,cAAhBA,EAAM8B,MAAwB,cAAgB,QAiB5D,SAASC,EAAW/B,GAAQ,IAC/B0B,EAAsC1B,EAAtC0B,OAAQpB,EAA8BN,EAA9BM,aAAcE,EAAgBR,EAAhBQ,YAC9B,OACI,kBAAC,EAAD,KACI,kBAACmB,EAAD,KAAQD,EAAOI,OACf,kBAAC,IAAD,CAAWE,YAAaN,EAAOrB,KAC1B,SAAAW,GAAQ,OACL,kBAACa,EAAD,eACIC,MAAOJ,EAAOI,MACdX,IAAKH,EAASI,UACVJ,EAASiB,gBAEZP,EAAOQ,MAAMC,KAAI,SAACC,EAAMhC,GACrB,IAAIG,EAlBX,SAAC6B,GAElB,OADcA,EAAK/B,GAAK+B,EAAK7B,KAAyB6B,EARjDC,QAAQ,WAAY,OACpBA,QAAQ,SAAU,OAClBA,QAAQ,SAAU,OAClBA,QAAQ,MAAM,SAASC,GAAM,OAAOA,EAAIC,iBAsBVC,CAAaJ,GACpB/B,EAAK+B,EAAK/B,GAAK+B,EAAK/B,GAAK+B,EAC7B,OAAO,kBAACjC,EAAD,CACKsC,IAAKpC,EACLE,KAAMA,EACNF,GAAIA,EACJD,MAAOA,EACPE,aAAcA,EACdE,YAAaA,OAG5BQ,EAAS0B,iB,oSAQlCX,EAAWN,aAAe,CACtBC,OAAQ,ICpEZ,IAAMC,EAAQ7B,IAAO8B,GAAV,KAILe,EAAU7C,IAAO8C,EAAV,KAIPC,EAAkB/C,IAAOC,IAAV,KAKN,SAAS+C,IACpB,OACI,kBAACD,EAAD,KACI,kBAAC,EAAD,8BACA,kBAACF,EAAD,gE,0sBCbZ,IAAM9C,EAAYC,IAAOC,IAAV,KAKTgD,EAAgBjD,IAAOC,IAAV,KAObiD,EAAkBlD,IAAOC,IAAV,KAMfkD,EAASnD,IAAOoD,OAAV,KACU,SAAAlD,GAAK,MAAmB,WAAfA,EAAMO,KAAoB,UAAY,aA2NtD4C,E,kDA9Mb,WAAYnD,GAAO,IAAD,8BAChB,cAAMA,IAqBRoD,gBAAkB,WAChB,EAAKC,SAAS,CACZC,UAAU,EACVC,cAAe,EAAKC,MAAMhD,YAAYiD,UAzBxB,EA6BlBC,gBAAkB,WAChB,EAAKL,SAAS,CACZC,UAAU,KA/BI,EAmClBK,cAAgB,WACd,IAAMC,EAAiB,EAAKJ,MAAMK,QAAX,YAAkC3B,MACzD,MAAM,yCAAN,OAAgD0B,EAAeH,OAAS,EAAIG,EAAeE,KAAK,MAAQ,QAAxG,6BACY,EAAKN,MAAMhD,YAAYiD,OADnC,6BArCgB,EAyClBnD,aAAe,SAAAyD,GAmBb,IAnB0B,IAAD,EACQ,EAAKP,MAA9BhD,EADiB,EACjBA,YAAaqD,EADI,EACJA,QAGf5D,EAAWO,EAAYC,MAAK,SAAA2B,GAAI,OAAIA,IAAS2B,KAC/CC,EAAkB,YAAOxD,GAEvByD,EAA0BzD,EAAY0D,WAAU,SAAA9B,GAAI,OAAIA,IAAS2B,KAEjEI,EAAyBN,EAAO,YAAc3B,MAAMgC,WAAU,SAAA9B,GAAI,OAAIA,IAAS2B,KAE/EK,EAA0BP,EAAO,YAAc3B,MAAMmC,QAAO,SAACjC,EAAKhC,GAAN,OAAgBA,GAAS+D,KAErFG,EAA0BT,EAAO,YAAc3B,MAAMmC,QAAO,SAACjC,EAAKhC,GAAN,OAAgBA,GAAS+D,KAErFI,EAAcP,EAAmBK,QAAO,SAACjC,EAAMhC,GACnD,OAAOkE,EAAwBE,QAAQpC,IAAS,KAG1CqC,EAAI,EAAGA,EAAIT,EAAmBP,OAAQgB,IAC5C,IAAI,IAAIC,EAAI,EAAGA,EAAIH,EAAYd,OAAQiB,IAClCV,EAAmBS,KAAOF,EAAYG,IACvCV,EAAmBW,OAAOF,EAAG,GAKhCxE,IACD+D,EAAmBW,OAAOV,EAAyB,GACnD,EAAKZ,SAAS,CACZ7C,YAAawD,KAIb/D,GACF,EAAKoD,SAAS,CACZ7C,YAAa4D,KA7ED,EAkFlBQ,kBAAoB,SAAAC,GAMlB,OALgBA,EACbxC,QAAQ,WAAY,OACpBA,QAAQ,SAAU,OAClBA,QAAQ,SAAU,OAClBA,QAAQ,MAAM,SAASC,GAAM,OAAOA,EAAIC,kBAvF3B,EAkGlBuC,iCAAmC,SAAAC,GACjC,OAAO,EAAKvB,MAAMhD,YAAYC,MAAK,SAAC2B,EAAKhC,GACvC,OAAO2E,IAAqB3E,MApGd,EAwGlB4E,UAxGkB,uCAwGN,WAAOC,GAAP,iDAAAC,EAAA,yDACFC,EAAwBF,EAAxBE,YAAaC,EAAWH,EAAXG,OAGjBD,EAJM,oDAQRA,EAAYnD,cAAgBoD,EAAOpD,aACnCmD,EAAY/E,QAAUgF,EAAOhF,MATrB,iDAePgF,EAAOpD,cAAgBmD,EAAYnD,aAC9BqD,EAAe,EAAK7B,MAAMK,QAAQuB,EAAOpD,aACzCsD,EAAa,EAAK9B,MAAMK,QAAQsB,EAAYnD,aAC5CuD,EAH0C,YAGxBF,EAAanD,OAC/BsD,EAJ0C,YAI1BF,EAAWpD,OAJe,EAK9BqD,EAAYZ,OAAOS,EAAOhF,MAAO,GALH,mBAKzCqF,EALyC,KAOjB,gBAA5BN,EAAYnD,aACP0D,EADqC,eAClB,EAAKlC,MAAMK,SACjC,EAAKiB,iCAAiCK,EAAY/E,SAMnDoF,EAAUb,OAAOQ,EAAY/E,MAAO,EAAGqF,EAAQpF,IAC/CqF,EAAaP,EAAYnD,aAAaE,MAAQsD,EAC9CE,EAAaN,EAAOpD,aAAaE,MAAQqD,GAPzC,EAAKlC,SAAS,CACZQ,QAAS6B,MAcPA,EADH,eACsB,EAAKlC,MAAMK,SAC9B8B,EAAgB,EAAKC,sBAAsBH,GACjDD,EAAUb,OAAOQ,EAAY/E,MAAO,EAAGuF,GACvCD,EAAaN,EAAOpD,aAAaE,MAAQqD,EACzCG,EAAaP,EAAYnD,aAAaE,MAAQsD,EAC9C,EAAKnC,SAAS,CACZQ,QAAS6B,OAMPhE,EAAS,EAAK8B,MAAMK,QAAQuB,EAAOpD,aACnC6D,EAFH,YAEqBnE,EAAOQ,OACzBwD,EAHH,eAGsB,EAAKlC,MAAMK,SACjC,EAAKiB,iCAAiCK,EAAY/E,SAK/C,EACcyF,EAAYlB,OAAOS,EAAOhF,MAAO,GADhD,mBACIqF,EADJ,KAEHI,EAAYlB,OAAOQ,EAAY/E,MAAO,EAAGqF,GACzCC,EAAaN,EAAOpD,aAAaE,MAAQ2D,GAPzC,EAAKxC,SAAS,CACZQ,QAAS6B,KAzDL,2CAxGM,sDAEhB,EAAKlC,MAAQ,CACXK,QAAS,CACP,cAAiB,CACfxD,GAAI,gBACJyB,MAAO,YACPI,MAAOlC,EAAM8F,iBAEf,YAAe,CACbzF,GAAI,cACJyB,MAAO,UACPI,MAAOlC,EAAM+F,gBAGjBvF,YAAa,GACbwF,YAAa,CAAC,gBAAiB,eAC/BzC,cAAevD,EAAMuD,cACrBD,UAAU,GAlBI,E,kEA2FI2C,GACpB,MAAO,CACL5F,GAAI4F,EACJ1F,KAAM2F,KAAKtB,kBAAkBqB,M,+BAiFxB,IAAD,OACN,OACE,kBAAClD,EAAD,KACE,kBAACD,EAAD,MACA,kBAACE,EAAD,KACE,2BAAIkD,KAAK1C,MAAMF,SAAW4C,KAAKvC,gBAAkB,OAEnD,kBAAC,IAAD,CACEqB,UAAW,SAACC,GAAD,OAAY,EAAKD,UAAUC,KAEtC,kBAAC,EAAD,KACGiB,KAAK1C,MAAMwC,YAAY7D,KAAI,SAAC4B,EAAU3D,GACrC,IAAMsB,EAAS,EAAK8B,MAAMK,QAAQE,GAClC,OAAO,kBAAChC,EAAD,CACGU,IAAKrC,EACLsB,OAAQA,EACRtB,MAAOA,EACPE,aAAc,EAAKA,aACnBE,YAAa,EAAKgD,MAAMhD,YACxBoE,kBAAmB,EAAKA,yBAKxC,kBAAC3B,EAAD,CAAQ1C,KAAK,SAAS4F,QAAS,kBAAM,EAAK/C,oBAA1C,UACA,kBAACH,EAAD,CAAQ1C,KAAK,SAAS4F,QAAS,kBAAM,EAAKzC,oBAA1C,e,GAzMU0C,aCjCZ5C,EAAQ,CACZsC,gBAAiB,CACf,CACEzF,GAAI,YACJE,KAAM,cAER,CACEF,GAAI,WACJE,KAAM,aAER,CACEF,GAAI,WACJE,KAAM,aAER,CACEF,GAAI,gBACJE,KAAM,kBAER,CACEF,GAAI,qBACJE,KAAM,wBAER,CACEF,GAAI,UACJE,KAAM,YAER,CACEF,GAAI,SACJE,KAAM,UAER,CACEF,GAAI,OACJE,KAAM,QAER,CACEF,GAAI,aACJE,KAAM,eAER,CACEF,GAAI,MACJE,KAAM,OAER,CACEF,GAAI,UACJE,KAAM,YAER,CACEF,GAAI,MACJE,KAAM,OAER,CACEF,GAAI,UACJE,KAAM,YAER,CACEF,GAAI,cACJE,KAAM,gBAER,CACEF,GAAI,OACJE,KAAM,SAGVwF,cAAe,GACfxC,cAAe,GAGjB8C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CACET,gBAAiBtC,EAAMsC,gBACvBC,cAAevC,EAAMuC,cACrBxC,cAAeC,EAAMD,iBAGzBiD,SAASC,eAAe,W","file":"static/js/main.e050137c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Draggable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n    color: ${props => props.isLocked ? 'gray' : 'white'};\n    padding: 8px;\n    margin-bottom: 8px;\n    font-weight: bold;\n    display: flex;\n    :hover ${props => !props.isLocked ? `{\n            background-color: gray;\n            opacity: .8;\n            width: 90%;\n            color: white;\n            }` : null\n    }\n`\n\nconst Handle = styled.div`\n    width: 20px;\n    height: 20px;\n    border-radius: 4px;\n    margin-right: 8px;\n`\n\nexport default function Column(props) {\n    const { index, id, handleDblClk, name, lockedArray } = props\n    const isLocked = lockedArray.some(lockedItem => lockedItem === id)\n\n    const [hovered, setHover] = useState(false)\n    return (\n        <Draggable draggableId={id} index={index} isDragDisabled={isLocked}>\n            {(provided) =>(\n                <Container\n                    onMouseEnter={() => setHover(true)}\n                    onMouseLeave={() => setHover(false)}\n                    isLocked={isLocked}\n                    ref={provided.innerRef}\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    index={index}\n                    onDoubleClick={() => handleDblClk(id)}\n                >\n                    <Handle>\n                        <i className={isLocked ? \"fa fa-lock\" : hovered ? \"fas fa-bars\" : null}></i>\n                    </Handle>\n                    {name}\n                </Container>\n            )}\n        </Draggable>\n    )\n}\n\nColumn.defaultProps = {\n    column: {}\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Column from './Column'\nimport { Droppable } from 'react-beautiful-dnd'\n\nconst Container = styled.div`\n    margin: 8px;\n    width: 50%;\n    display: flex;\n    flex-direction: column;\n`\n\nconst Title = styled.h3`\n    padding: 8px;\n    color: gray;\n`\n\nconst ListContainer = styled.div`\n    padding: 8px;\n    flex-grow: 1;\n    min-height: 100px;\n    border-right: ${props => props.title === 'Available' ? 'gray dashed' : null}\n`\n\nconst convertIdToString = (idString) => {\n    let newString = idString\n        .replace(/([A-Z])/g, ' $1')\n        .replace(/([%])/g, ' $1')\n        .replace(/([&])/g, ' $1')\n        .replace(/^./, function(str){ return str.toUpperCase(); })\n    return newString\n}\n\nconst renderString = (item) => {\n    let newItem = item.id ? item.name : convertIdToString(item)\n    return newItem\n}\n\nexport default function ColumnList(props) {\n    const { column, handleDblClk, lockedArray } = props\n    return (\n        <Container>\n            <Title>{column.title}</Title>\n            <Droppable droppableId={column.id}>\n                {provided => (\n                    <ListContainer\n                        title={column.title}\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}    \n                    >\n                        {column.items.map((item, index) => {\n                            let name = renderString(item)\n                            let id = item.id ? item.id : item\n                            return <Column\n                                        key={id} \n                                        name={name} \n                                        id={id} \n                                        index={index}\n                                        handleDblClk={handleDblClk}\n                                        lockedArray={lockedArray}\n                                    /> \n                        })}\n                        {provided.placeholder}\n                    </ListContainer>\n                )}\n            </Droppable>\n        </Container>\n    )\n}\n\nColumnList.defaultProps = {\n    column: {}\n}","import React from 'react'\nimport styled from 'styled-components'\n\nconst Title = styled.h3`\n    color: white;\n`\n\nconst SubText = styled.p`\n    color: gray;\n`\n\nconst HeaderContainer = styled.div`\n    padding: 0 1em;\n    margin: 20px 0;\n`\n\nexport default function Header() {\n    return (\n        <HeaderContainer>\n            <Title>{`Configure Data Fields`}</Title>\n            <SubText>{`Drag & drop between columns to configure visible data.`}</SubText>\n        </HeaderContainer>\n    )\n}","import React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd'\nimport styled from 'styled-components'\nimport ColumnList from './ColumnList'\nimport Header from './Header'\nimport './App.css';\n\nconst Container = styled.div`\n  display: flex;\n  background-color: #0f1117;\n`\n\nconst MainContainer = styled.div`\n  width: 600px;\n  padding: 0 1em;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst ResultContainer = styled.div`\n  padding: 0 1em;\n  color: white;\n  overflow-wrap: break-word;\n`\n\nconst Button = styled.button`\n  background-color: ${props => props.name === 'submit' ? '#4894c7' : '#7e838c'};\n  border-radius: 3px;\n  border: none;\n  color: white;\n  padding: 9px 20px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 0 10px 30px 10px;\n`\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      columns: {\n        'availableList': {\n          id: 'availableList',\n          title: 'Available',\n          items: props.availableColumn\n        },\n        'visibleList': {\n          id: 'visibleList',\n          title: 'Visible',\n          items: props.visibleColumn,\n        },\n      },\n      lockedArray: [],\n      columnOrder: ['availableList', 'visibleList'],\n      lockedColumns: props.lockedColumns,\n      onSubmit: false\n    }\n  }\n\n  handleSubmitBtn = () => {\n    this.setState({\n      onSubmit: true,\n      lockedColumns: this.state.lockedArray.length\n    })\n  }\n\n  handleCancelBtn = () => {\n    this.setState({\n      onSubmit: false\n    })\n  }\n\n  renderResults = () => {\n    const visibleColumns = this.state.columns['visibleList'].items\n    return `The id strings inside visible list is ${visibleColumns.length > 0 ? visibleColumns.join(', ') : 'empty'}. \n    There are ${this.state.lockedArray.length} items currently locked.`\n  }\n\n  handleDblClk = columnId => {\n    const { lockedArray, columns } = this.state\n    const VISIBLELIST = 'visibleList'\n    // if the column is inside locked array, it returns true\n    const isLocked = lockedArray.some(item => item === columnId)\n    let currentLockedArray = [...lockedArray]\n    // finds index of the item inside the locked array\n    const foundIndexInLockedArray = lockedArray.findIndex(item => item === columnId)\n    // find index of the item inside the visible array\n    const findIndexInVisibleList = columns[VISIBLELIST].items.findIndex(item => item === columnId)\n    // returns the column itself and the items before it\n    const prevfilteredVisibleList = columns[VISIBLELIST].items.filter((item,index) => index <= findIndexInVisibleList)\n    // returns the items itself and the items after it\n    const nextfilteredVisibleList = columns[VISIBLELIST].items.filter((item,index) => index >= findIndexInVisibleList)\n    // filters item that matches between two arrays\n    const newfiltered = currentLockedArray.filter((item, index) => {\n      return nextfilteredVisibleList.indexOf(item) > -1\n    })\n    // removes item from lockedArray if items matches\n    for(let i = 0; i < currentLockedArray.length; i++){\n      for(let j = 0; j < newfiltered.length; j++) {\n        if(currentLockedArray[i] === newfiltered[j]){\n          currentLockedArray.splice(i, 1)\n        }\n      }\n    }\n    // if items are locked - remove items from the isLockedArray\n    if(isLocked){\n      currentLockedArray.splice(foundIndexInLockedArray, 1)\n      this.setState({\n        lockedArray: currentLockedArray\n      })\n    }\n    // if items are not locked - add items to the isLockedArray\n    if(!isLocked) {\n      this.setState({\n        lockedArray: prevfilteredVisibleList\n      })\n    }\n  }\n\n  convertIdToString = idString => {\n    let newString = idString\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/([%])/g, ' $1')\n      .replace(/([&])/g, ' $1')\n      .replace(/^./, function(str){ return str.toUpperCase(); })\n    return newString\n  }\n\n  convertStringToObject(string){\n    return {\n      id: string,\n      name: this.convertIdToString(string),\n    }\n  }\n\n  isColumnBeingDraggedInLockedArea = destinationIndex => {\n    return this.state.lockedArray.some((item,index) => {\n      return destinationIndex === index\n    })\n  }\n\n  onDragEnd = async (result) => {\n    const { destination, source } = result\n\n    // if it gets dragged outside of the list in neither visible and available list, do nothing\n    if(!destination) return\n\n    // if it gets dropped in the same position it was before, do nothing\n    if(\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // if item drops in another list\n    if(source.droppableId !== destination.droppableId){\n      const sourceColumn = this.state.columns[source.droppableId];\n      const destColumn = this.state.columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items]\n      const [removed] = sourceItems.splice(source.index, 1)\n      // if item is being dropped is in the visible list\n      if(destination.droppableId === 'visibleList'){\n        const currentState = {...this.state.columns}\n        if(this.isColumnBeingDraggedInLockedArea(destination.index)){\n          this.setState({\n            columns: currentState\n          })\n        } // drag and drop column to dropped position from available list\n        else {\n          destItems.splice(destination.index, 0, removed.id)\n          currentState[destination.droppableId].items = destItems\n          currentState[source.droppableId].items = sourceItems\n          this.setState({\n            columns: currentState\n          })\n        }\n      }\n      // if item is being dropped is in the available list from visible list\n      else {\n        const currentState = {...this.state.columns}\n        const removedObject = this.convertStringToObject(removed)\n        destItems.splice(destination.index, 0, removedObject)\n        currentState[source.droppableId].items = sourceItems\n        currentState[destination.droppableId].items = destItems\n        this.setState({\n          columns: currentState,\n        })\n      }\n    }\n    // if item drops in the same list\n    else {\n      const column = this.state.columns[source.droppableId];\n      const copiedItems = [...column.items]\n      const currentState = {...this.state.columns}\n      if(this.isColumnBeingDraggedInLockedArea(destination.index)){\n        this.setState({\n          columns: currentState\n        })\n      }\n      else {\n        const [removed] = copiedItems.splice(source.index, 1)\n        copiedItems.splice(destination.index, 0, removed)\n        currentState[source.droppableId].items = copiedItems\n        this.setState({\n          columns: currentState\n        })\n      }\n    }\n  }\n\n  render(){\n    return (\n      <MainContainer>\n        <Header />\n        <ResultContainer>\n          <p>{this.state.onSubmit ? this.renderResults() : null }</p>\n        </ResultContainer>\n        <DragDropContext \n          onDragEnd={(result) => this.onDragEnd(result)}\n        >\n          <Container>\n            {this.state.columnOrder.map((columnId, index) => {\n              const column = this.state.columns[columnId]\n              return <ColumnList \n                        key={index} \n                        column={column} \n                        index={index} \n                        handleDblClk={this.handleDblClk} \n                        lockedArray={this.state.lockedArray}\n                        convertIdToString={this.convertIdToString}\n                      />\n            })}\n          </Container>\n        </DragDropContext>\n        <Button name=\"submit\" onClick={() => this.handleSubmitBtn()}>Submit</Button>\n        <Button name=\"cancel\" onClick={() => this.handleCancelBtn()}>Cancel</Button>\n      </MainContainer>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nconst state = {\n  availableColumn: [\n    {\n      id: 'startTime',\n      name: 'Start Time'\n    },\n    {\n      id: 'stopTime',\n      name: 'Stop Time'\n    },\n    {\n      id: 'perPoint',\n      name: 'Per Point'\n    },\n    {\n      id: 'initialMargin',\n      name: 'Initial Margin'\n    },\n    {\n      id: 'symbol&Description',\n      name: 'Symbol & Description'\n    },\n    {\n      id: 'change%',\n      name: 'Change %'\n    },\n    {\n      id: 'change',\n      name: 'Change',\n    },\n    {\n      id: 'last',\n      name: 'Last'\n    },\n    {\n      id: 'lastVolume',\n      name: 'Last Volume'\n    },\n    {\n      id: 'bid',\n      name: 'Bid'\n    },\n    {\n      id: 'bidSize',\n      name: 'Bid Size'\n    },\n    {\n      id: 'ask',\n      name: 'Ask'\n    },\n    {\n      id: 'askSize',\n      name: 'Ask Size'\n    },\n    {\n      id: 'totalVolume',\n      name: 'Total Volume'\n    },\n    {\n      id: 'high',\n      name: 'High'\n    }\n  ],\n  visibleColumn: [],\n  lockedColumns: 0\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App \n      availableColumn={state.availableColumn} \n      visibleColumn={state.visibleColumn} \n      lockedColumns={state.lockedColumns}\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}